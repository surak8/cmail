//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;

namespace NScmail {

    // http://csharp.net-informations.com/communications/csharp-email-attachment.htm
    // COLT-EX2010.colt.com

    public class cmailDriver {
        [STAThread()]
        public static void Main(string[] args) {
            int nargs;
            List<string> argsToProcess;
            string  smtpServer, srcEmail, destEmail, subject, body;
            bool showHelp;
            MailMessage mail;
            SmtpClient SmtpServer;
            Attachment attachment;
            bool abort = false;

            smtpServer = ConfigurationManager.AppSettings["SMTP_SERVER"];
            srcEmail = ConfigurationManager.AppSettings["sourceEmail"];
            destEmail = ConfigurationManager.AppSettings["destEmail"];
            subject = "default subject";
            body = "default body";
            argsToProcess = parseArguments(args, ref smtpServer, ref destEmail, out showHelp, ref subject, ref body);
//            if ((nargs = args.Length) > 0) {
  //          }
            if (showHelp) {
                Console.Out.WriteLine("user requested help.");
                showUserHelp(Console.Out, Assembly.GetEntryAssembly());
            } else {
                mail = new MailMessage();
                SmtpServer = new SmtpClient(smtpServer);
                mail.From = new MailAddress(srcEmail);
                mail.To.Add(destEmail);
                mail.Subject = "Test Mail - 1";
                mail.Body = "mail with attachment";

                //                    attachment = new Attachment("your attachment file");
                //                  mail.Attachments.Add(attachment);

                SmtpServer.Port = 587;
                SmtpServer.Credentials = new NetworkCredential("username", "password");
                SmtpServer.EnableSsl = true;

                SmtpServer.Send(mail);
            }

        }

        static List<string> parseArguments(string[] args, ref string smtpServer, ref string destEmail, out bool showHelp, ref string subject, ref string body) {
            List<string> argsToProcess;
            int nargs = args.Length, len;
            string anArg;

            showHelp = false;
            argsToProcess = new List<string>();
            for (int i = 0; i < nargs; i++) {
                anArg = args[i];
                if ((len = anArg.Length) >= 2) {
                    if (anArg[0] == '-' || anArg[0] == '/') {
                        switch (anArg[1]) {
                            case 'b':
                                if (len > 2) body = anArg.Substring(2).Trim();
                                else { body = args[i + 1]; i++; }
                                break;
                            case 'r':
                                if (len > 2) destEmail = anArg.Substring(2).Trim();
                                else { destEmail = args[i + 1]; i++; }
                                break;
                            case 's':
                                if (len > 2) subject = anArg.Substring(2).Trim();
                                else { subject = args[i + 1]; i++; }
                                break;
                            case 'h': showHelp = true; break;
                            case '?': showHelp = true; break;
                        }
                    } else {
                        argsToProcess.Add(anArg);
                    }
                }
            }
            return argsToProcess;
        }

        static void showUserHelp(TextWriter tw, Assembly a) {
            tw.WriteLine("usage:");
            // -D devexpress
            // -g generate-code
            // -isDebug phibro-style
            // -s simple

            tw.WriteLine("\t" + Path.GetFileNameWithoutExtension(a.Location) +
                ": -b body-text -r recipient -s subject");
        }
    }
}